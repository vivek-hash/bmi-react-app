{"version":3,"sources":["logo.svg","Bmi.js","App.js","reportWebVitals.js","index.js"],"names":["Bmi","useState","height","setHeight","weight","setWeight","bmiResult","setBmiResult","status","setStatus","style","color","fontSize","className","type","placeholder","value","onChange","e","target","onClick","bmi","Number","toFixed","bmiStatus","getStatus","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LAAe,I,mBCEA,SAASA,IACvB,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACC,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEA,EAAkCJ,mBAAS,IAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAEA,EAA4BN,mBAAS,IAArC,mBAAOO,EAAP,KAAeC,EAAf,KA2BA,IAAMC,EAAQ,CACZC,MAAO,QACPC,SAAU,IAGZ,OACE,qCACG,sBAAKC,UAAU,MAAf,UACC,gDACA,sBAAKA,UAAU,QAAf,UACE,0CADF,IACuB,uBACrB,uBAAQC,KAAK,OAAOC,YAAY,QAAQC,MAAOd,EAAQe,SAAU,SAACC,GAAOf,EAAUe,EAAEC,OAAOH,UAC5F,uBACA,0CAAmB,uBACnB,uBAAOF,KAAK,OAAOC,YAAY,QAAQC,MAAOZ,EAAQa,SAAU,SAACC,GAAOb,EAAUa,EAAEC,OAAOH,aAG7F,sBAAMH,UAAU,SAAhB,SACE,wBAAQO,QA3ChB,WACE,IAAIC,EAAMC,OAAOlB,EAAM,SAAIF,EAAS,IAAQ,IAAGqB,QAAQ,GAEvDhB,EAAac,GAEb,IAAIG,EASN,SAAmBH,GACjB,OAAIA,EAAM,KACE,cACJA,GAAO,MAAQA,EAAM,KACjB,SACJA,GAAO,IAAMA,EAAM,KAChB,aAEC,QAjBII,CAAUJ,GAE1BZ,EAAUe,GAEVrB,EAAU,IAEVE,EAAU,KAgCJ,kCAKJ,qBAAKQ,UAAU,eAAf,SAA+BP,GAC3B,gCACE,qBAAII,MAAOA,EAAX,yBAA+BJ,KAC/B,qBAAII,MAAOA,EAAX,qBAA2BF,aCjDxBkB,ICAAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACtC,EAAD,MAEFuC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.67a06347.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from \"react\";\r\n\r\nexport default function Bmi() {\r\n const [height, setHeight] = useState(\"\");\r\n  const [weight, setWeight] = useState(\"\");\r\n\r\n  const [bmiResult, setBmiResult] = useState(\"\");\r\n\r\n  const [status, setStatus] = useState(\"\");\r\n\r\n  function calculateBMI() {\r\n    let bmi = Number(weight / (height / 100) ** 2).toFixed(2);\r\n    \r\n    setBmiResult(bmi);\r\n\r\n    let bmiStatus = getStatus(bmi);\r\n    \r\n    setStatus(bmiStatus);\r\n    \r\n    setHeight(\"\");\r\n    \r\n    setWeight(\"\");\r\n  }\r\n\r\n  function getStatus(bmi) {\r\n    if (bmi < 18.5)\r\n         return \"Underweight\";\r\n    else if(bmi >= 18.5 && bmi < 24.9)\r\n         return \"Normal\";\r\n    else if(bmi >= 25 && bmi < 29.9) \r\n        return \"Overweight\";\r\n     else \r\n         return \"Obese\";\r\n  }\r\n\r\n  const style = {\r\n    color: 'black',\r\n    fontSize: 20\r\n  };\r\n\r\n  return (\r\n    <>\r\n       <div className=\"bmi\">\r\n        <h1>BMI CALCULATOR</h1>\r\n        <div className=\"input\">\r\n          <span >HEIGHT</span> <br/>\r\n          <input  type=\"text\" placeholder=\"in cm\" value={height} onChange={(e) => {setHeight(e.target.value);}}></input>\r\n          <br/>\r\n          <span>WEIGHT</span><br/>\r\n          <input type=\"text\" placeholder=\"in kg\" value={weight} onChange={(e) => {setWeight(e.target.value);}}></input>\r\n        \r\n        </div>\r\n        <span className=\"button\">\r\n          <button onClick={calculateBMI}> CACLULATE BMI </button>\r\n        </span>\r\n      \r\n      </div>\r\n      \r\n      <div className=\"check-result\">{bmiResult && (\r\n          <div>\r\n            <h2 style={style}>Your BMI is {bmiResult}</h2>\r\n            <h2 style={style}>You are {status}</h2>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport Bmi from './Bmi';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Bmi from './Bmi';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Bmi/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}